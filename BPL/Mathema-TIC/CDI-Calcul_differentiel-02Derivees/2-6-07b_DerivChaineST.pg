## Ressource produite dans le cadre du projet Mathéma-TIC 
## (Samuel Bernard - Cégep régional de Lanaudière à Terrebonne, et 
## Bruno Poellhuber - Université de Montréal),
## financé par le programme d’arrimage universités-collèges (PCUC) 
## du ministère de l'Enseignement supérieur, de la Recherche et de la Science du Québec (MESRS).


## DBsubject(Calcul différentiel et intégral d'une variable)
## DBchapter(Dérivation de fonctions)
## KEYWORDS('dérivation en chaîne', 'dérivée de la fonction puissance', 'dérivée du produit de fonctions', 'fonction algébrique')

## Level(3)    
## Language(fr)
## Modifié par Julie Tremblay 
## Date : février 2017
## Traduction française : Sylvie Charbonneau
###############Source###############
## Fichier source:  Library/UCSB/Stewart5_3_5/Stewart5_3_5_17.pg
## ZDBsubject(Calculus - single variable)
## ZDBchapter(Differentiation)
## ZDBsection(Derivatives involving multiple rules (all rules))
## ZInstitution(UCSB)
## ZMLT(prodpolypower)
## ZLevel(3)
###############Source###############


DOCUMENT();

loadMacros(
"PGstandard.pl",
"contextLimitedPolynomial.pl",
"MathObjects.pl",
"scaffold.pl",
"PGML.pl",
#"PGcourse.pl",
);

COMMENT("Ce problème comporte deux parties dont la partie suivante est affichée seulement si l\'étudiant a réussi la partie précédente. Vous devez autoriser un minimum de deux essais pour réussir ce problème car l\'étudiant doit soumettre ses réponses pour chacune des parties.");

TEXT(&beginproblem);
$showPartialCorrectAnswers = 1;

Context("Numeric");
Context()->flags->set(
  tolerance => 0.0001,
  tolType => "relative",
);

$a=random(2,10,1);
$b=random(2,10,1);
$c=random(2,9,1);

#exposants
$n = random(3,8);
do{$m = random(3,8);} until ($m!=$n);

$exp1 = Formula("1+$a*x")->reduce;
$exp2 = Formula("$b+$c*x-x^2")->reduce;

$g = Formula("($exp1)^($n)*($exp2)^($m)");
$Dg = $g->D->reduce;

## Début du problème par parties
Scaffold::Begin();
    
Section::Begin("Première partie");
BEGIN_PGML
Dériver [`g(x) = [$g] `].

[` g'(x)= `][_______________________________________________________]{$Dg}
END_PGML
Section::End();

$n1 = $n-1;
$m1 = $m-1;

Section::Begin("Deuxième partie");
BEGIN_PGML
Factoriser au maximum la fonction [` g'(x) `] sous la forme

>>[`` ([$exp1])^{[$n1]}([$exp2])^{[$m1]}Q(x) ``]<<

où [` Q(x) `] est un polynôme quadratique simplifié de la forme [` ax^2+bx+c `].

[` g'(x) = ([$exp1])^{[$n1]}([$exp2])^{[$m1]}\Bigl( `][__________________________] [` \Bigl) `]
END_PGML

Context("LimitedPolynomial-Strict");

$c2 = -$a*($n+2*$m);
$c1 = $a*$n*$c - 2*$m + $m*$a*$c;
$c0 = $n*$a*$b + $m*$c;

$q = Formula("$c2*x^2+$c1*x+$c0")->reduce;
ANS($q->cmp);

Section::End();
  
Scaffold::End();
## Fin du problème

ENDDOCUMENT();
