##DESCRIPTION
##  Apply wye-delta transformation to analyze dc circuit
##ENDDESCRIPTION

## DBsubject('Linear Algebra')
## DBchapter('System of Linear Equations')
## KEYWORDS('applications')

## Author('MC Bonneau')
## Institution('Cegep Heritage College')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"MatrixUnits.pl",
"MatrixReduce.pl",
"PGmatrixmacros.pl",
"PGgraphmacros.pl",
"PGunion.pl",
"parserPopUp.pl",
"parserImplicitEquation.pl",
"scaffold.pl"
);

TEXT(&beginproblem);
$showPartialCorrectAnswers = 1;
$refreshCachedImages = 1; 

Context("Numeric");
# random values
$a = random(300,500,50);  # V
$b = random(200,400,50);  # Ohm
$c = random(100,400, 100);  # Ohm
$d = $a+$b-$c;

# a+x2 = x1
$a11 = -1;
$a12 = 1;
$a13 = 0;
$a14 = 0;
$a15 = 0;
$b1 = Compute("-$a");

# b = x2+x3+x5
$a21 = 0;
$a22 = -1;
$a23 = -1;
$a24 = 0;
$a25 = -1;
$b2 = Compute("-$b");

# x1+x3=c+x4
$a31 = 1;
$a32 = 0;
$a33 = 1;
$a34 = -1;
$a35 = 0;
$b3 = Compute("$c");

# x4+x5=d
$a41 = 0;
$a42 = 0;
$a43 = 0;
$a44 = 1;
$a45 = 1;
$b4 = Compute("$d");

Context("Matrix");
$M = Matrix([[$a11,$a12,$a13,$a14,$a15,$b1],[$a21,$a22,$a23,$a24,$a25,$b2],[$a31,$a32,$a33,$a34,$a35,$b3],[$a41,$a42,$a43,$a44,$a45,$b4]]);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$A = Matrix([[$a11,$a12,$a13,$a14,$a15],[$a21,$a22,$a23,$a24,$a25],[$a31,$a32,$a33,$a34,$a35],[$a41,$a42,$a43,$a44,$a45]]);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$B = Matrix([[$b1], [$b2], [$b3], [$b4]]);

Context("Numeric");
Context()->variables->add("x1" => 'Real', "x2" => 'Real', "x3" => 'Real', "x4" => 'Real', "x5" => 'Real');
Context()->noreduce('(-x)-y');
Context()->noreduce('(-x)+y');
$Eq1 = Formula("x2-x1")->reduce;
$Eq2 = Formula("-x2-x3-x5")->reduce;
$Eq3 = Formula("x1 + x3 - x4")->reduce;
$Eq4 = Formula("x4 + x5")->reduce;

###########################################
Context()->texStrings;
BEGIN_TEXT
$BBOLD Question $EBOLD $BR $BR
\{ image("e4oBQ_with_label.png", width=>300, height=>150) \} $BR$BR
The flow of traffic (in vehicles per hour) through a network of streets is shown in the diagram above, where \(\,a = $a \), \(\,b = $b \), \(\,c = $c \) and \(\,d = $d \). $BR
$BR
$BBOLD (a) $EBOLD Find the flow of traffic along each street for \(x_1, x_2, x_3, x_4 \) and \( x_5\). 
$BR $BR
$BBOLD (b) $EBOLD Find the flow of traffic along each street knowing that the flow of traffic along \(\,x_3 \) is \( 50\) vehicles per hour and that the flow of traffic along \(\,x_5 \) is \( 100\) vehicles per hour.
$BR $BR
$BBOLD (c) $EBOLD Due to construction, the city must close the street associated to \(x_3\) and this will imply a maximum number of vehicles per hour on the street associated to \(x_5\). What is that maximum number? 
$BR
$BR
$HR
$BBOLD Solution $EBOLD $BR $BR
END_TEXT
Context()->normalStrings;

###########################################
#  The scaffold
Scaffold::Begin();

side_labels( @array );

###########################################
###########################################

Context()->texStrings;
BEGIN_TEXT
$BBOLD Part A $EBOLD $BR $BR

END_TEXT
Context()->normalStrings;

###########################################

Section::Begin("Define the variables and the system");

Context("Numeric");
Context()->variables->add("x1" => 'Real', "x2" => 'Real', "x3" => 'Real', "x4" => 'Real');
# @ A : $a + x2 = x1
# @ B : $b = x2 + x3 + x5
# @ C : x1 + x3 = $c + x4 
# @ D : x4 + x5 = $d

$EqAIn = Formula("$a + x2");
$EqAOut = Formula("x1");
$EqBIn = Formula("$b");
$EqBOut = Formula("x2 + x3 + x5");
$EqCIn = Formula("x1 + x3");
$EqCOut = Formula("$c + x4");
$EqDIn = Formula("x4 + x5");
$EqDOut = Formula("$d");

Context()->texStrings;
BEGIN_TEXT
The variables \(x_1,\) \(x_2,\) \(x_3,\) \(x_4\) and \(x_5\) are defined as per the figure. $BR $BR
Write $BBOLD x1 $EBOLD for \(x_1\), $BBOLD x2 $EBOLD for \(x_2\), and so on. $BR $BR

We have
$HR $HR
$BR $BR
@ \( A \): \{ans_rule(15)\} \( = \) \{ans_rule(15)\} ($BITALIC write the flow into node \(A\) and the flow out of node \(A\) $EITALIC) $BR $BR
Rewriting the above equation in standard form gives us $BR $BR
\( \quad \) \{ans_rule(30)\} \( = \) \{ans_rule(10)\} ($BITALIC write the variables on the left and the constants on the right $EITALIC) 
$BR $BR
$HR $HR
$BR $BR
@ \( B \): \{ans_rule(15)\} \( = \) \{ans_rule(15)\} ($BITALIC write the flow into node \(B\) and the flow out of node \(B\) $EITALIC) $BR $BR
Rewriting the above equation in standard form gives us $BR $BR
\( \quad \) \{ans_rule(30)\} \( = \) \{ans_rule(10)\} ($BITALIC write the variables on the left and the constants on the right $EITALIC) 
$BR $BR
$HR $HR
$BR $BR
@ \( C \): \{ans_rule(15)\} \( = \) \{ans_rule(15)\} ($BITALIC write the flow into node \(C\) and the flow out of node \(C\) $EITALIC) $BR $BR
Rewriting the above equation in standard form gives us $BR $BR
\( \quad \) \{ans_rule(30)\} \( = \) \{ans_rule(10)\} ($BITALIC write the variables on the left and the constants on the right $EITALIC) 
$BR $BR
$HR $HR
$BR $BR
@ \( D \): \{ans_rule(15)\} \( = \) \{ans_rule(15)\} ($BITALIC write the flow into node \(D\) and the flow out of node \(D\) $EITALIC) $BR $BR
Rewriting the above equation in standard form gives us $BR $BR
\( \quad \) \{ans_rule(30)\} \( = \) \{ans_rule(10)\} ($BITALIC write the variables on the left and the constants on the right $EITALIC) 

END_TEXT
Context()->normalStrings;

ANS($EqAIn->cmp);
ANS($EqAOut->cmp);
ANS($Eq1->cmp);
ANS($b1->cmp);

ANS($EqBIn->cmp);
ANS($EqBOut->cmp);
ANS($Eq2->cmp);
ANS($b2->cmp);

ANS($EqCIn->cmp);
ANS($EqCOut->cmp);
ANS($Eq3->cmp);
ANS($b3->cmp);

ANS($EqDIn->cmp);
ANS($EqDOut->cmp);
ANS($Eq4->cmp);
ANS($b4->cmp);

Section::End();

Section::Begin("Create the augmented matrix");

Context()->texStrings;
BEGIN_TEXT
Using
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( $Eq1 \)","\( = \)","\( $b1 \)"], align=>RIGHT, separation=>0, indent=>10).
AlignedRow(["\( $Eq2 \)","\( = \)","\( $b2 \)"], align=>RIGHT, separation=>0, indent=>10).
AlignedRow(["\( $Eq3 \)","\( = \)","\( $b3 \)"], align=>RIGHT, separation=>0, indent=>10).
AlignedRow(["\( $Eq4 \)","\( = \)","\( $b4 \)"], align=>RIGHT, separation=>0, indent=>10).

EndTable()
\}
$BR
write the augmented matrix for the flow \(x_1,\) \(x_2,\) \(x_3,\) \(x_4\) and \(x_5\). $BR $BR
\( \quad \) \{ $A->ans_array(2) \} \{ $B->ans_array(2) \}
END_TEXT
Context()->normalStrings;

ANS( $A->cmp() );
ANS( $B->cmp() );

Section::End();

###########################################
### R1C1 
###########################################
Section::Begin("Find the RREF of the augmented matrix");

Context("Numeric");
$popRow = PopUp(["?", "row 1 column 1", "row 1 column 2", "row 1 column 3", "row 1 column 4", "row 2 column 1", "row 2 column 2","row 2 column 3", "row 2 column 4", "row 3 column 1", "row 3 column 2", "row 3 column 3", "row 3 column 4", "row 4 column 1", "row 4 column 2", "row 4 column 3", "row 4 column 4"],"row 1 column 1");

Context("Numeric");
$popSwap = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"interchange two rows");
$popMultiply = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"multiply a row by a non-zero constant");
$popAdd = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"add a multiple of a row to another row");
$popLeadingOne = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"there is already a leading 1");

#check box 20
$ans_eval20 = $popSwap->cmp();
$ans_hash20 = $ans_eval20->evaluate($inputs_ref->{ANS_NUM_TO_NAME(20)});
$TESTSwap = $ans_hash20->{score};

$ans_eval20 = $popMultiply->cmp();
$ans_hash20 = $ans_eval20->evaluate($inputs_ref->{ANS_NUM_TO_NAME(20)});
$TESTMultiply = $ans_hash20->{score};

$ans_eval20 = $popAdd->cmp();
$ans_hash20 = $ans_eval20->evaluate($inputs_ref->{ANS_NUM_TO_NAME(20)});
$TESTAdd = $ans_hash20->{score};

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}  ) )\} 
    \{   display_matrix_mm($M, align=>'rrrrr|r')  \} 
\) 

$BR $BR
For this step, the leading 1 should be in \{ $popRow->menu() \} and to create that leading 1, I will \{ $popLeadingOne->menu() \}.

END_TEXT
Context()->normalStrings;

ANS($popRow->cmp() );

if($TESTSwap)
{
    ANS($popSwap->cmp() );
}
elsif($TESTMultiply)
{
    ANS($popMultiply->cmp() );
}
elsif($TESTAdd)
{
    ANS($popAdd->cmp() );
}
else
{
    ANS($popLeadingOne->cmp() );
}

Section::End();

Section::Begin(" ");

Context("Matrix");
$MR1 = $M;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR1 = $A;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR1 = $B;

if($TESTSwap)
{
    if($A->element(2,1) == 1 || $A->element(3,1) == 1 || $A->element(4,1) == 1)
    {
Context("Numeric");
$pop_1_Row1 = PopUp(["?", "R1", "R2","R3","R4"],"R1");
$pop_1_Row2 = PopUp(["?", "R1", "R2","R3","R4"],"R2");
$pop_1_Row3 = PopUp(["?", "R1", "R2","R3","R4"],"R3");
$pop_1_Row4 = PopUp(["?", "R1", "R2","R3","R4"],"R4");
$pop_2_Row1 = PopUp(["?", "R1", "R2","R3","R4"],"R1");
$pop_2_Row2 = PopUp(["?", "R1", "R2","R3","R4"],"R2");
$pop_2_Row3 = PopUp(["?", "R1", "R2","R3","R4"],"R3");
$pop_2_Row4 = PopUp(["?", "R1", "R2","R3","R4"],"R4");

#check box 21
$ans_eval21 = $pop_1_Row2->cmp();
$ans_hash21 = $ans_eval21->evaluate($inputs_ref->{ANS_NUM_TO_NAME(21)});
$TEST_1_Row2 = $ans_hash21->{score};

$ans_eval21 = $pop_1_Row3->cmp();
$ans_hash21 = $ans_eval21->evaluate($inputs_ref->{ANS_NUM_TO_NAME(21)});
$TEST_1_Row3 = $ans_hash21->{score};

$ans_eval21 = $pop_1_Row4->cmp();
$ans_hash21 = $ans_eval21->evaluate($inputs_ref->{ANS_NUM_TO_NAME(21)});
$TEST_1_Row4 = $ans_hash21->{score};

#check box 22
$ans_eval22 = $pop_2_Row2->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TEST_2_Row2 = $ans_hash22->{score};

$ans_eval22 = $pop_2_Row3->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TEST_2_Row3 = $ans_hash22->{score};

$ans_eval22 = $pop_2_Row4->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TEST_2_Row4 = $ans_hash22->{score};

$i = 1;
if($TEST_1_Row2)
{ 
    $i = 2;
}
elsif($TEST_1_Row3)
{ 
    $i = 3;
}
elsif($TEST_1_Row4)
{ 
    $i = 4;
}

$j = 1;
if($TEST_2_Row2)
{ 
    $j = 2;
}
elsif($TEST_2_Row3)
{ 
    $j = 3;
}
elsif($TEST_2_Row4)
{ 
    $j = 4;
}

Context('Fraction')->parens->set("[" => {formMatrix => 1});
$MR1 = row_switch($M,$i,$j);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR1 = row_switch($A,$i,$j);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR1 = row_switch($B,$i,$j);

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4} ) )\} 
    \{   display_matrix_mm($M, align=>'rrrrr|r')  \} 
\) 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)",$pop_1_Row1->menu()."\(\Leftrightarrow\)".$pop_2_Row1->menu(),$AR1->ans_array(2),$BR1->ans_array(2)],     align=>LEFT, separation=>0, indent=>10).

EndTable()
\}
END_TEXT
Context()->normalStrings;

if($TEST_1_Row2)
{
    ANS($pop_1_Row2->cmp());
}
elsif($TEST_1_Row3)
{
    ANS($pop_1_Row3->cmp());
}
elsif($TEST_1_Row4)
{
    ANS($pop_1_Row4->cmp());
}
else
{
    ANS($pop_1_Row1->cmp());
}

if($TEST_2_Row2)
{
    ANS($pop_2_Row2->cmp());
}
elsif($TEST_2_Row3)
{
    ANS($pop_2_Row3->cmp());
}
elsif($TEST_2_Row4)
{
    ANS($pop_2_Row4->cmp());
}
else
{
    ANS($pop_2_Row1->cmp());
}

ANS($AR1->cmp);
ANS($BR1->cmp);
    }
    else
    {
Context()->texStrings;
BEGIN_TEXT
It is best to create a leading 1 before interchanging two rows. Reopen the previous tab and choose a different option to first create a leading 1. $BR $BR
Leave the following box empty: \{ans_rule(5)\}
END_TEXT
Context()->normalStrings;

ANS(str_cmp("ok"));
    }
}
elsif($TESTMultiply)
{
Context("Numeric");
$pop_1_Row1 = PopUp(["?", "R1", "R2","R3", "R4"],"R1");
$pop_1_Row2 = PopUp(["?", "R1", "R2","R3", "R4"],"R2");
$pop_1_Row3 = PopUp(["?", "R1", "R2","R3", "R4"],"R3");
$pop_1_Row4 = PopUp(["?", "R1", "R2","R3", "R4"],"R4");

#check box 22
$ans_eval22 = $pop_1_Row2->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TEST_1_Row2 = $ans_hash22->{score};

$ans_eval22 = $pop_1_Row3->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TEST_1_Row3 = $ans_hash22->{score};

$ans_eval22 = $pop_1_Row4->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TEST_1_Row4 = $ans_hash22->{score};

$i = 1;
if($TEST_1_Row2)
{ 
    $i = 2;
}
elsif($TEST_1_Row3)
{ 
    $i = 3;
}
elsif($TEST_1_Row4)
{ 
    $i = 4;
}

if( $A->element($i,1) != 0)
{
Context("Matrix");
$MR1 = row_mult($M,$i,1/$M->element($i,1));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR1 = row_mult($A,$i,1/$A->element($i,1));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR1 = row_mult($B,$i,1/$A->element($i,1));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4} ) )\} 
    \{   display_matrix_mm($M, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)",ans_rule(2).$pop_1_Row1->menu(),$AR1->ans_array(2),$BR1->ans_array(2)], align=>LEFT, separation=>0, indent=>10).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((1/$A->element($i,1))->cmp);
if($TEST_1_Row2)
{
    ANS($pop_1_Row2->cmp());
}
elsif($TEST_1_Row3)
{
    ANS($pop_1_Row3->cmp());
}
elsif($TEST_1_Row4)
{
    ANS($pop_1_Row4->cmp());
}
else
{
    ANS($pop_1_Row1->cmp());
}
ANS($AR1->cmp);
ANS($BR1->cmp);
}
    else
    {
Context()->texStrings;
BEGIN_TEXT
Choose a row where the first element is non-zero. Reopen the previous tab and choose the same option using a different row OR choose a different option to first create a leading 1. $BR $BR
Leave the following box empty: \{ans_rule(5)\}
END_TEXT
Context()->normalStrings;

ANS(str_cmp("ok"));
    }

}
elsif($TESTAdd)
{
Context("Matrix");
$MR1 = $M;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR1 = $A;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR1 = $B;

Context("Numeric");
$pop_1_Row1 = PopUp(["?", "R1", "R2","R3", "R4"],"R1");
$pop_1_Row2 = PopUp(["?", "R1", "R2","R3", "R4"],"R2");
$pop_1_Row3 = PopUp(["?", "R1", "R2","R3", "R4"],"R3");
$pop_1_Row4 = PopUp(["?", "R1", "R2","R3", "R4"],"R4");
$pop_2_Row1 = PopUp(["?", "R1", "R2","R3", "R4"],"R1");
$pop_2_Row2 = PopUp(["?", "R1", "R2","R3", "R4"],"R2");
$pop_2_Row3 = PopUp(["?", "R1", "R2","R3", "R4"],"R3");
$pop_2_Row4 = PopUp(["?", "R1", "R2","R3", "R4"],"R4");
$popSignPlus = PopUp(["?","+","-"],"+");
$popSignMinus = PopUp(["?","+","-"],"-");

#check box 21
$ans_eval21 = $pop_1_Row2->cmp();
$ans_hash21 = $ans_eval21->evaluate($inputs_ref->{ANS_NUM_TO_NAME(21)});
$TEST_1_Row2 = $ans_hash21->{score};

$ans_eval21 = $pop_1_Row3->cmp();
$ans_hash21 = $ans_eval21->evaluate($inputs_ref->{ANS_NUM_TO_NAME(21)});
$TEST_1_Row3 = $ans_hash21->{score};

$ans_eval21 = $pop_1_Row4->cmp();
$ans_hash21 = $ans_eval21->evaluate($inputs_ref->{ANS_NUM_TO_NAME(21)});
$TEST_1_Row4 = $ans_hash21->{score};

#check box 22
$ans_eval22 = $popSignMinus->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TESTSignMinus = $ans_hash22->{score};

$ans_eval22 = $popSignPlus->cmp();
$ans_hash22 = $ans_eval22->evaluate($inputs_ref->{ANS_NUM_TO_NAME(22)});
$TESTSignPlus = $ans_hash22->{score};

#check box 23
$ans_eval23 = Compute("")->cmp;
$ans_hash23 = $ans_eval23->evaluate($inputs_ref->{ANS_NUM_TO_NAME(23)});
$TESTkValue = $ans_hash23->{score};

#check box 24
$ans_eval24 = $pop_2_Row2->cmp();
$ans_hash24 = $ans_eval24->evaluate($inputs_ref->{ANS_NUM_TO_NAME(24)});
$TEST_2_Row2 = $ans_hash24->{score};

$ans_eval24 = $pop_2_Row3->cmp();
$ans_hash24 = $ans_eval24->evaluate($inputs_ref->{ANS_NUM_TO_NAME(24)});
$TEST_2_Row3 = $ans_hash24->{score};

$ans_eval24 = $pop_2_Row4->cmp();
$ans_hash24 = $ans_eval24->evaluate($inputs_ref->{ANS_NUM_TO_NAME(24)});
$TEST_2_Row4 = $ans_hash24->{score};

$i = 1;
if($TEST_1_Row2)
{ 
    $i = 2;
}
elsif($TEST_1_Row3)
{
    $i = 3;
}
elsif($TEST_1_Row4)
{
    $i = 4;
}

$j = 1;
if($TEST_2_Row2)
{ 
    $j = 2;
}
elsif($TEST_2_Row3)
{
    $j = 3;
}
elsif($TEST_2_Row4)
{
    $j = 4;
}

$sign = 1;
if($TESTSignMinus)
{
    $sign = -1;
}

$k = 100;
if(!$TESTkValue)
{
    $k = $inputs_ref->{ANS_NUM_TO_NAME(23)};
}

if($k!=0)
{
    Context("Matrix");
    $MR1 = row_add($M,$i,$j,$sign*$k);
    
    Context("Matrix");
    Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
    Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
    Context()->parens->set("[" => {type => "Matrix", close=>'|'});
    $AR1 = row_add($A,$i,$j,$sign*$k);

    Context("Matrix");
    Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
    Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
    Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
    $BR1 = row_add($B,$i,$j,$sign*$k);

}

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($M, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)",$pop_1_Row1->menu().$popSignPlus->menu().ans_rule(2).$pop_2_Row2->menu(),$AR1->ans_array(2),$BR1->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

if($TEST_1_Row2)
{
    ANS($pop_1_Row2->cmp());
}
elsif($TEST_1_Row3)
{
    ANS($pop_1_Row3->cmp());
}
elsif($TEST_1_Row4)
{
    ANS($pop_1_Row4->cmp());
}
else
{
    ANS($pop_1_Row1->cmp());
}

if($TESTSignMinus)
{
    ANS($popSignMinus->cmp());
}
else
{
    ANS($popSignPlus->cmp());
}

ANS(Compute("$k")->cmp);

if($TEST_2_Row2)
{
    ANS($pop_2_Row2->cmp());
}
elsif($TEST_2_Row3)
{
    ANS($pop_2_Row3->cmp());
}
elsif($TEST_2_Row4)
{
    ANS($pop_2_Row4->cmp());
}
else
{
    ANS($pop_2_Row1->cmp());
}

ANS($AR1->cmp);
ANS($BR1->cmp);
}
else
{
    if($A->element(1,1) != 1 )
    {
Context()->texStrings;
BEGIN_TEXT
A leading 1 needs to be created in column 1. Reopen the previous tab and choose a different option to first create a leading 1. $BR $BR
Leave the following box empty: \{ans_rule(5)\}
END_TEXT
Context()->normalStrings;

ANS(str_cmp("ok"));
    }
}

Section::End();

#######################
#Option to swap rows 
#######################
Section::Begin(" ");

Context("Numeric");
$AR11_Flag = 0;

if($AR1->element(1,1) != 1 && ($AR1->element(2,1) == 1 || $AR1->element(3,1) == 1  || $AR1->element(4,1) == 1 ))
{
$AR11_Flag = 1;

$popSwap = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"interchange two rows");

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1, align=>'rrrrr|r')  \} 
\) 

$BR $BR
Now I will \{ $popLeadingOne->menu() \}

END_TEXT
Context()->normalStrings;

ANS($popSwap->cmp() );
}
Section::End();

Section::Begin(" ");

if( $AR11_Flag == 1)
{
Context("Matrix");
$MR11 = $MR1;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR11 = $AR1;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR11 = $BR1;

Context("Numeric");
$j = 4;
$pop_Row = PopUp(["?", "R1", "R2","R3", "R4"],"R4");

if($AR1->element(2,1) == 1)
{
    $j = 2;
    $pop_Row = PopUp(["?", "R1", "R2","R3", "R4"],"R2");
}
elsif($AR1->element(3,1) == 1)
{
    $j = 3;
    $pop_Row = PopUp(["?", "R1", "R2","R3", "R4"],"R3");
}

Context("Matrix");
$MR11 = row_switch($MR1,1,$j);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR11 = row_switch($AR1,1,$j);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR11 = row_switch($BR1,1,$j);

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\( \text{R1} \Leftrightarrow\)".$pop_Row->menu(),$AR11->ans_array(2),$BR11->ans_array(2)],     align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS($pop_Row->cmp());
ANS($AR11->cmp);
ANS($BR11->cmp);
}
Section::End();

###########################################
Section::Begin(" ");

if($AR11_Flag == 0)
{
    $MR1C1 = $MR1;
    $MR1 = $MR1;
    $AR1C1 = $AR1;
    $AR1 = $AR1;
    $BR1C1 = $BR1;
    $BR1 = $BR1;
}
else
{
    $MR1C1 = $MR11;
    $MR1 = $MR11;
    $AR1C1 = $AR11;
    $AR1 = $AR11;
    $BR1C1 = $BR11;
    $BR1 = $BR11;
}

if($AR1->element(1,1) != 1 )
{
Context()->texStrings;
BEGIN_TEXT
A leading 1 needs to be created in column 1. Fix the previous row operation accordingly or reopen the second tab and choose a different option to first create a leading 1. $BR $BR
Leave the following box empty: \{ans_rule(5)\}
END_TEXT
Context()->normalStrings;

ANS(str_cmp("ok"));
}
else
{

Context("Numeric");
$popColumn = PopUp(["?", "column 1", "column 2", "column 3", "column 4"],"column 1");
$popPivot = PopUp(["?", "row 1 column 1", "row 1 column 2", "row 1 column 3", "row 1 column 4", "row 2 column 1", "row 2 column 2","row 2 column 3", "row 2 column 4", "row 3 column 1", "row 3 column 2", "row 3 column 3", "row 3 column 4", "row 4 column 1", "row 4 column 2", "row 4 column 3", "row 4 column 4"],"row 1 column 1");

Context("Numeric");
$popAbove = PopUp(["?", "above", "below", "above and below"],"below");

Context()->texStrings;
BEGIN_TEXT 
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1, align=>'rrrrr|r')  \} 
\) 
$BR $BR
For this step, there should be 0's in \{ $popColumn->menu() \}. I will use the leading 1 in \{ $popPivot->menu() \} to create those 0's \{ $popAbove->menu() \} that leading 1.

END_TEXT
Context()->normalStrings;

ANS($popColumn->cmp() );
ANS($popPivot->cmp() );
ANS($popAbove->cmp() );

Section::End();

Section::Begin(" ");

if($AR1->element(3,1) !=0 && $AR1->element(4,1)==0  && $AR1->element(2,1)==0)
{
Context("Matrix");
$MR1C1 = row_add($MR1, 3, 1, -$MR1->element(3,1));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR1C1 = row_add($AR1, 3, 1, -$AR1->element(3,1));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR1C1 = row_add($BR1, 3, 1, -$AR1->element(3,1));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR."\(  \text{R3} +  \)".ans_rule(2)."\(  \text{R1} \)".$BR.$BR."\(  \text{R4} \)",$AR1C1->ans_array(2),$BR1C1->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR1->element(3,1))->cmp);
ANS($AR1C1->cmp);
ANS($BR1C1->cmp);
}

} #for previous begin
Section::End();

###########################################
### R2C2 
###########################################
Section::Begin(" ");

Context("Numeric");
$popRow = PopUp(["?", "row 1 column 1", "row 1 column 2", "row 1 column 3", "row 1 column 4", "row 2 column 1", "row 2 column 2","row 2 column 3", "row 2 column 4", "row 3 column 1", "row 3 column 2", "row 3 column 3", "row 3 column 4", "row 4 column 1", "row 4 column 2", "row 4 column 3", "row 4 column 4"],"row 2 column 2");

Context("Numeric");
if( $AR1C1->element(2,2) == 1)
{
    $popOption = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"there is already a leading 1");
}
elsif( $AR1C1->element(3,2) == 1 || $AR1C1->element(4,2) == 1)
{
    $popOption = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"interchange two rows");
}
else
{
    $popOption = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"multiply a row by a non-zero constant");
}

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1C1, align=>'rrrrr|r')  \} 
\) 

$BR $BR
For this step, the leading 1 should be in \{ $popRow->menu() \} and to create that leading 1, I will \{ $popOption->menu() \}.

END_TEXT
Context()->normalStrings;

ANS($popRow->cmp() );
ANS($popOption->cmp() );

Section::End();

Section::Begin(" ");

Context("Matrix");
$MR2 = $MR1C1;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2 = $AR1C1;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2 = $BR1C1;

if( $AR1C1->element(2,2) == 1)
{
    #leading 1
Context("Matrix");
$MR2 = $MR1C1;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2 = $AR1C1;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2 = $BR1C1;

}
elsif( $AR1C1->element(3,2) == 1)
{
    #swap
Context("Matrix");
$MR2 = row_switch($MR1C1,2,3);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2 = row_switch($AR1C1,2,3);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2 = row_switch($BR1C1,2,3);

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1C1, align=>'rrrrr|r')  \} 
\) 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R2} \Leftrightarrow \text{R3} \)",$AR2->ans_array(2),$BR2->ans_array(2)],     align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS($AR2->cmp);
ANS($BR2->cmp);

}
elsif( $AR1C1->element(4,2) == 1)
{
    #swap
Context("Matrix");
$MR2 = row_switch($MR1C1,2,4);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2 = row_switch($AR1C1,2,4);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2 = row_switch($BR1C1,2,4);

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1C1, align=>'rrrrr|r')  \} 
\) 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R2} \Leftrightarrow \text{R4} \)",$AR2->ans_array(2),$BR2->ans_array(2)],     align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS($AR2->cmp);
ANS($BR2->cmp);

}
elsif( $AR1C1->element(3,2) == -1)
{
    #multiply
Context("Matrix");
$MR2a = row_mult($MR1C1,3,1/$MR1C1->element(3,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2a = row_mult($AR1C1,3,1/$AR1C1->element(3,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2a = row_mult($BR1C1,3,1/$AR1C1->element(3,2));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1C1, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR.ans_rule(2)."\( \text{R3} \)".$BR.$BR."\( \text{R4} \)",$AR2a->ans_array(2),$BR2a->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((1/$AR1C1->element(3,2))->cmp);
ANS($AR2a->cmp);
ANS($BR2a->cmp);

Section::End();

###########################################
Section::Begin(" ");

    #swap
Context("Matrix");
$MR2 = row_switch($MR2a,2,3);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2 = row_switch($AR2a,2,3);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2 = row_switch($BR2a,2,3);

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2a, align=>'rrrrr|r')  \} 
\) 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R2} \Leftrightarrow \text{R3} \)",$AR2->ans_array(2),$BR2->ans_array(2)],     align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS($AR2->cmp);
ANS($BR2->cmp);

}
elsif( $AR1C1->element(4,2) == -1)
{
    #multiply
Context("Matrix");
$MR2a = row_mult($MR1C1,4,1/$MR1C1->element(4,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2a = row_mult($AR1C1,4,1/$AR1C1->element(4,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2a = row_mult($BR1C1,4,1/$AR1C1->element(4,2));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1C1, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR."\( \text{R3} \)".$BR.$BR.ans_rule(2)."\( \text{R4} \)",$AR2a->ans_array(2),$BR2a->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((1/$AR1C1->element(4,2))->cmp);
ANS($AR2a->cmp);
ANS($BR2a->cmp);

Section::End();

###########################################
Section::Begin(" ");

    #swap
Context("Matrix");
$MR2 = row_switch($MR2a,2,4);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2 = row_switch($AR2a,2,4);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2 = row_switch($BR2a,2,4);

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2a, align=>'rrrrr|r')  \} 
\) 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R2} \Leftrightarrow \text{R4} \)",$AR2->ans_array(2),$BR2->ans_array(2)],     align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS($AR2->cmp);
ANS($BR2->cmp);

}
else
{
    #multiply
if( $MR1C1->element(2,2) != 0)
{
Context("Matrix");
$MR2 = row_mult($MR1C1,2,1/$MR1C1->element(2,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2 = row_mult($AR1C1,2,1/$AR1C1->element(2,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2 = row_mult($BR1C1,2,1/$AR1C1->element(2,2));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR1C1, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1} \)".$BR.$BR.ans_rule(2)."\(  \text{R2} \)".$BR.$BR."\( \text{R3} \)".$BR.$BR."\( \text{R4} \)",$AR2->ans_array(2),$BR2->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((1/$AR1C1->element(2,2))->cmp);
ANS($AR2->cmp);
ANS($BR2->cmp);
}
}
Section::End();

###########################################
Section::Begin(" ");

Context("Numeric");
$popColumn = PopUp(["?", "column 1", "column 2", "column 3", "column 4"],"column 2");
$popPivot = PopUp(["?", "row 1 column 1", "row 1 column 2", "row 1 column 3", "row 1 column 4", "row 2 column 1", "row 2 column 2","row 2 column 3", "row 2 column 4", "row 3 column 1", "row 3 column 2", "row 3 column 3", "row 3 column 4", "row 4 column 1", "row 4 column 2", "row 4 column 3", "row 4 column 4"],"row 2 column 2");

Context("Numeric");
$popAbove = PopUp(["?", "above", "below", "above and below"],"above and below");

Context()->texStrings;
BEGIN_TEXT 
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2, align=>'rrrrr|r')  \} 
\) 
$BR
$BR
For this step, there should be 0's in \{ $popColumn->menu() \}. I will use the leading 1 in \{ $popPivot->menu() \} to create those 0's \{ $popAbove->menu() \} that leading 1.

END_TEXT
Context()->normalStrings;

ANS($popColumn->cmp() );
ANS($popPivot->cmp() );
ANS($popAbove->cmp() );

Section::End();

Section::Begin(" ");

Context("Matrix");
$MR2C2 = $MR2;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2C2 = $AR2;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2C2 = $BR2;

if($AR2->element(1,2) != 0 && $AR2->element(3,2) != 0 && $AR2->element(4,2) == 0)
{
Context("Matrix");
$Mtemp = row_add($MR2, 1, 2, -$MR2->element(1,2));
$MR2C2 = row_add($Mtemp, 3, 2, -$MR2->element(3,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$Atemp = row_add($AR2, 1, 2, -$AR2->element(1,2));
$AR2C2 = row_add($Atemp, 3, 2, -$AR2->element(3,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$Btemp = row_add($BR2, 1, 2, -$AR2->element(1,2));
$BR2C2 = row_add($Btemp, 3, 2, -$AR2->element(3,2));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1}   +  \)".ans_rule(2)."\(  \text{R2} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR."\(  \text{R3}   +  \)".ans_rule(2)."\(  \text{R2} \)".$BR.$BR."\(  \text{R4} \)",$AR2C2->ans_array(2),$BR2C2->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR2->element(1,2))->cmp);
ANS((-$AR2->element(3,2))->cmp);
ANS($AR2C2->cmp);
ANS($BR2C2->cmp);
}
elsif($AR2->element(1,2) == 0 && $AR2->element(3,2) != 0 && $AR2->element(4,2) == 0)
{
Context("Matrix");
$MR2C2 = row_add($MR2, 3, 2, -$MR2->element(3,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2C2 = row_add($AR2, 3, 2, -$AR2->element(3,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2C2 = row_add($BR2, 3, 2, -$AR2->element(3,2));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR."\(  \text{R3}   +  \)".ans_rule(2)."\(  \text{R2} \)".$BR.$BR."\(  \text{R4} \)",$AR2C2->ans_array(2),$BR2C2->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR2->element(3,2))->cmp);
ANS($AR2C2->cmp);
ANS($BR2C2->cmp);
}
elsif($AR2->element(1,2) != 0 && $AR2->element(3,2) == 0 && $AR2->element(4,2) == 0)
{
Context("Matrix");
$MR2C2 = row_add($MR2, 1, 2, -$MR2->element(1,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR2C2 = row_add($AR2, 1, 2, -$AR2->element(1,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR2C2 = row_add($BR2, 1, 2, -$AR2->element(1,2));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1}   +  \)".ans_rule(2)."\(  \text{R2} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR."\(  \text{R3} \)".$BR.$BR."\(  \text{R4} \)",$AR2C2->ans_array(2),$BR2C2->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR2->element(1,2))->cmp);
ANS($AR2C2->cmp);
ANS($BR2C2->cmp);
}
#here
elsif($AR2->element(1,2) != 0 && $AR2->element(3,2) != 0 && $AR2->element(4,2) != 0)
{
Context("Matrix");
$Mtemp = row_add($MR2, 1, 2, -$MR2->element(1,2));
$Mtemp1 = row_add($Mtemp, 3, 2, -$MR2->element(3,2));
$MR2C2 = row_add($Mtemp1, 4, 2, -$MR2->element(4,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$Atemp = row_add($AR2, 1, 2, -$AR2->element(1,2));
$Atemp1 = row_add($Atemp, 3, 2, -$AR2->element(3,2));
$AR2C2 = row_add($Atemp1, 4, 2, -$AR2->element(4,2));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$Btemp = row_add($BR2, 1, 2, -$AR2->element(1,2));
$Btemp1 = row_add($Btemp, 3, 2, -$AR2->element(3,2));
$BR2C2 = row_add($Btemp1, 4, 2, -$AR2->element(4,2));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1}   +  \)".ans_rule(2)."\(  \text{R2} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR."\(  \text{R3}   +  \)".ans_rule(2)."\(  \text{R2} \)".$BR.$BR."\(  \text{R4}    +  \)".ans_rule(2)."\(  \text{R2}\)",$AR2C2->ans_array(2),$BR2C2->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR2->element(1,2))->cmp);
ANS((-$AR2->element(3,2))->cmp);
ANS((-$AR2->element(4,2))->cmp);
ANS($AR2C2->cmp);
ANS($BR2C2->cmp);
}

Section::End();

###########################################
### R3C4
###########################################
Section::Begin(" ");

Context("Numeric");
$popRow = PopUp(["?", "row 1 column 1", "row 1 column 2", "row 1 column 3", "row 1 column 4", "row 2 column 1", "row 2 column 2","row 2 column 3", "row 2 column 4", "row 3 column 1", "row 3 column 2", "row 3 column 3", "row 3 column 4", "row 4 column 1", "row 4 column 2", "row 4 column 3", "row 4 column 4"],"row 3 column 4");

Context("Numeric");
if( $AR2C2->element(3,4) == 1)
{
    $popOption = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"there is already a leading 1");
}
elsif( $AR2C2->element(4,4) == 1)
{
    $popOption = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"interchange two rows");
}
else
{
    $popOption = PopUp(["Choose", "interchange two rows", "multiply a row by a non-zero constant", "add a multiple of a row to another row","there is already a leading 1", "there is a zero and I cannot create a leading 1"],"multiply a row by a non-zero constant");
}

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2C2, align=>'rrrrr|r')  \} 
\) 
$BR
$BR
For this step, the leading 1 should be in \{ $popRow->menu() \} and to create that leading 1, I will \{ $popOption->menu() \}.

END_TEXT
Context()->normalStrings;

ANS($popRow->cmp() );
ANS($popOption->cmp() );

Section::End();

Section::Begin(" ");

Context("Matrix");
$MR3 = $MR2C2;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR3 = $AR2C2;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR3 = $BR2C2;

if( $AR2C2->element(3,4) == 1)
{
    #leading 1
}
elsif( $AR2C2->element(4,4) == 1)
{
    #swap
Context("Matrix");
$MR3 = row_switch($MR2C2,3,4);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR3 = row_switch($AR2C2,3,4);

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR3 = row_switch($BR2C2,3,4);

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2C2, align=>'rrrrr|r')  \} 
\) 

\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R3} \Leftrightarrow \text{R4} \)",$AR3->ans_array(2),$BR3->ans_array(2)],     align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS($AR3->cmp);
ANS($BR3->cmp);
}
else
{
    #multiply
if($MR2C2->element(3,4)!=0)
{
Context("Matrix");
$MR3 = row_mult($MR2C2,3,1/$MR2C2->element(3,3));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR3 = row_mult($AR2C2,3,1/$AR2C2->element(3,3));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR3 = row_mult($BR2C2,3,1/$AR2C2->element(3,3));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR2C2, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR.ans_rule(2)."\( \text{R3} \)".$BR.$BR."\(  \text{R4} \)",$AR3->ans_array(2),$BR3->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((1/$AR2C2->element(3,3))->cmp);
ANS($AR3->cmp);
ANS($BR3->cmp);
}
}

Section::End();

###########################################
Section::Begin(" ");

Context("Numeric");
$popColumn = PopUp(["?", "column 1", "column 2", "column 3", "column 4"],"column 4");
$popPivot = PopUp(["?", "row 1 column 1", "row 1 column 2", "row 1 column 3", "row 1 column 4", "row 2 column 1", "row 2 column 2","row 2 column 3", "row 2 column 4", "row 3 column 1", "row 3 column 2", "row 3 column 3", "row 3 column 4", "row 4 column 1", "row 4 column 2", "row 4 column 3", "row 4 column 4"],"row 3 column 4");

Context("Numeric");
$popAbove = PopUp(["?", "above", "below", "above and below"],"above and below");

Context()->texStrings;
BEGIN_TEXT 
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR3, align=>'rrrrr|r')  \} 
\) 
$BR
$BR
For this step, there should be 0's in \{ $popColumn->menu() \}. I will use the leading 1 in \{ $popPivot->menu() \} to create those 0's \{ $popAbove->menu() \} that leading 1.

END_TEXT
Context()->normalStrings;

ANS($popColumn->cmp() );
ANS($popPivot->cmp() );
ANS($popAbove->cmp() );

Section::End();

Section::Begin(" ");

Context("Matrix");
$MR3C3 = $MR3;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR3C3 = $AR3;

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR3C3 = $BR3;

if($AR3->element(1,4) != 0 && $AR3->element(2,4) != 0 && $AR3->element(4,4) == 0)
{
Context("Matrix");
$Mtemp = row_add($MR3, 1, 3, -$MR3->element(1,4));
$MR3C3 = row_add($Mtemp, 2, 3, -$MR3->element(2,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$Atemp = row_add($AR3, 1, 3, -$AR3->element(1,4));
$AR3C3 = row_add($Atemp, 2, 3, -$AR3->element(2,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$Btemp = row_add($BR3, 1, 3, -$AR3->element(1,4));
$BR3C3 = row_add($Btemp, 2, 3, -$AR3->element(2,4));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR3, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1}   +  \)".ans_rule(2)."\(  \text{R3} \)".$BR.$BR."\(  \text{R2}   +  \)".ans_rule(2)."\(  \text{R3} \)".$BR.$BR."\(  \text{R3} \)".$BR.$BR."\(  \text{R4} \)",$AR3C3->ans_array(2),$BR3C3->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR3->element(1,4))->cmp);
ANS((-$AR3->element(2,4))->cmp);
ANS($AR3C3->cmp);
ANS($BR3C3->cmp);
}
elsif($AR3->element(1,4) == 0 && $AR3->element(2,4) != 0 && $AR3->element(4,4) == 0)
{
Context("Matrix");
$MR3C3 = row_add($MR3, 2, 3, -$MR3->element(2,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR3C3 = row_add($AR3, 2, 3, -$AR3->element(2,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR3C3 = row_add($BR3, 2, 3, -$AR3->element(2,4));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR3, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  text{R1} \)".$BR.$BR."\(  \text{R2}   +  \)".ans_rule(2)."\(  \text{R3} \)".$BR.$BR."\(  \text{R3} \)".$BR.$BR."\(  \text{R4} \)",$AR3C3->ans_array(2),$BR3C3->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR3->element(2,4))->cmp);
ANS($AR3C3->cmp);
ANS($BR3C3->cmp);
}
elsif($AR3->element(1,4) != 0 && $AR3->element(2,4) == 0 && $AR3->element(4,4) == 0)
{
Context("Matrix");
$MR3C3 = row_add($MR3, 1, 3, -$MR3->element(1,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$AR3C3 = row_add($AR3, 1, 3, -$AR3->element(1,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$BR3C3 = row_add($BR3, 1, 3, -$AR3->element(1,4));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR3, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  text{R1}   +  \)".ans_rule(2)."\(  \text{R3} \)".$BR.$BR."\(  \text{R2} \)".$BR.$BR."\(  \text{R3} \)".$BR.$BR."\(  \text{R4} \)",$AR3C3->ans_array(2),$BR3C3->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR3->element(1,4))->cmp);
ANS($AR3C3->cmp);
ANS($BR3C3->cmp);
}
#here
elsif($AR3->element(1,4) != 0 && $AR3->element(2,4) != 0 && $AR3->element(4,4) != 0)
{
Context("Matrix");
$Mtemp = row_add($MR3, 1, 3, -$MR3->element(1,4));
$Mtemp1 = row_add($Mtemp, 2, 3, -$MR3->element(2,4));
$MR3C3 = row_add($Mtemp1, 4, 3, -$MR3->element(4,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {close=>'|',formMatrix => 1};
Context()->lists->set(Matrix=>{close=>'|',formMatrix => 1});
Context()->parens->set("[" => {type => "Matrix", close=>'|'});
$Atemp = row_add($AR3, 1, 3, -$AR3->element(1,4));
$Atemp1 = row_add($Atemp, 2, 3, -$AR3->element(2,4));
$AR3C3 = row_add($Atemp1, 4, 3, -$AR3->element(4,4));

Context("Matrix");
Context()->{cmpDefaults}{Matrix} = {open=>'.',formMatrix => 1};
Context()->lists->set(Matrix=>{open=>'.',formMatrix => 1});
Context()->parens->set("." => {type => "Matrix", open=>".", close => "]"});
$Btemp = row_add($BR3, 1, 3, -$AR3->element(1,4));
$Btemp1 = row_add($Btemp, 2, 3, -$AR3->element(2,4));
$BR3C3 = row_add($Btemp1, 4, 3, -$AR3->element(4,4));

Context()->texStrings;
BEGIN_TEXT
\( 
    \{side_labels(  qw(\text{R1} \text{R2} \text{R3} \text{R4}) )\} 
    \{   display_matrix_mm($MR3, align=>'rrrrr|r')  \} 
\) 
\{ 
BeginTable(border=>0, tex_border=>"1pt", spacing=>0, padding=>2, center=>0).
AlignedRow(["\( \sim \)","\(  \text{R1}   +  \)".ans_rule(2)."\(  \text{R3} \)".$BR.$BR."\(  \text{R2}   +  \)".ans_rule(2)."\(  \text{R3} \)".$BR.$BR."\(  \text{R3} \)".$BR.$BR."\(  \text{R4}   +  \)".ans_rule(2)."\(  \text{R3}\)",$AR3C3->ans_array(2),$BR3C3->ans_array(2)], align=>LEFT, separation=>0).

EndTable()
\}
END_TEXT
Context()->normalStrings;

ANS((-$AR3->element(1,4))->cmp);
ANS((-$AR3->element(2,4))->cmp);
ANS((-$AR3->element(4,4))->cmp);
ANS($AR3C3->cmp);
ANS($BR3C3->cmp);
}

Section::End();

###########################################
Section::Begin("Draw a conclusion");

Context("Point");
$P = Point($BR3C3->element(1,1), $BR3C3->element(2,1), 0, $BR3C3->element(3,1), 0);

Context("Vector");
Context()->{cmpDefaults}{Vector} = {promotePoints => 1};
Context()->lists->set(Vector=>{open=>'(', close=>')'});
Context()->variables->are(s=>"Real",t=>"Real");
$V = Vector(-1, -1, 1, 0, 0);
$W = Vector(-1, -1, 0, -1, 1);

#  for checking a particular vector parametric line
sub mycheck {
  my ($correct, $student, $ansHash) = @_;

  if ( 
       ($correct . i == $student . i) && 
       ($correct . j == $student . j) && 
       ($correct . k == $student . k) 
     ) 
  { return 1; } else { return 0; }
}

$S = Formula("s");
$T = Formula("t");
$Answer = $P + $S * $V + $T * $W;

Context()->texStrings;
BEGIN_TEXT
We have $BR
\( \quad 
    \{   display_matrix_mm($MR3C3, align=>'rrrrr|r')  \} 
\) 
$BR $BR
The general solution is $BR $BR
\( \quad (x_1,x_2,x_3,x_4,x_5) = \) \{ ans_rule(40) \} 
$BR $BR
$HR
$BBOLD Note: $EBOLD $BR
Write the general solution in one of the following format: $BR
\( \quad P \) $BR
\( \quad P + t \vec{v} \) $BR
\( \quad P + s \vec{v} + t \vec{w} \)$BR
\( \quad none \)

END_TEXT
Context()->normalStrings;

ANS($Answer->cmp);

Section::End();

###########################################
###########################################

Context()->texStrings;
BEGIN_TEXT
$BR
$BBOLD Part B $EBOLD $BR $BR

END_TEXT
Context()->normalStrings;

###########################################
Section::Begin(" ");

Context("Numeric");
$x3 = Compute("50");
$x5 = Compute("100");

$x1 = Compute("($a+$b)-$x3-$x5");
$x2 = Compute("$b - $x3 - $x5");
$x4 = Compute("$d-$x5");

Context()->texStrings;
BEGIN_TEXT
We know that the general solution is \( \quad (x_1,x_2,x_3,x_4,x_5) = $Answer\).
$BR $BR
Thus, when the flow of traffic along \(\,x_3 \) is \( 50\) vehicles per hour and when the flow of traffic along \(\,x_5 \) is \( 100\) vehicles per hour, $BR $BR
the flow of traffic along \(\,x_1 \) is \{ans_rule(10)\} vehicles per hour, $BR $BR
the flow of traffic along \(\,x_2 \) is \{ans_rule(10)\} vehicles per hour and $BR $BR
the flow of traffic along \(\,x_4 \) is \{ans_rule(10)\} vehicles per hour. $BR $BR

END_TEXT
Context()->normalStrings;

ANS($x1->cmp);
ANS($x2->cmp);
ANS($x4->cmp);

Section::End();

###########################################
###########################################

Context()->texStrings;
BEGIN_TEXT
$BR
$BBOLD Part C $EBOLD $BR $BR

END_TEXT
Context()->normalStrings;

###########################################

Section::Begin(" ");

Context("Numeric");
$max = min(($a+$b), $b, $d); 

Context("Numeric");
$popVar = PopUp(["?","s","t"],"s");

Context()->texStrings;
BEGIN_TEXT
We have $BR
\( \quad (x_1,x_2,x_3,x_4,x_5) = $Answer \) 
$BR $BR
When the street associated to \( x_3 \) is closed then \{ $popVar->menu() \} \(=\) \{ ans_rule(10) \}.
$BR $BR
In this case, \( x_5 \) can be at most \{ ans_rule(10) \}. $BR $BR
Thus, the maximum number of vehicles per hour on the street associated to \( x_5 \) is \{ans_rule(10)\}. $BR $BR

END_TEXT
Context()->normalStrings;

ANS($popVar->cmp);
ANS(Compute("0")->cmp);
ANS(Compute("$max")->cmp);
ANS(Compute("$max")->cmp);

Section::End();

###########################################
###########################################

Scaffold::End();

ENDDOCUMENT();        # This should be the last executable line in the problem.
